'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames3 = require('classnames');

var _classnames4 = _interopRequireDefault(_classnames3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /**
                                                                                                                                                                                                                              * List
                                                                                                                                                                                                                              * @author mayingcong <mayingcong@xingxy.cn>
                                                                                                                                                                                                                              * @date   2016-11-01
                                                                                                                                                                                                                              */

var List = _react2.default.createClass({
    displayName: 'List',

    propTypes: {
        classPrefix: _react2.default.PropTypes.string,
        borderPadding: _react2.default.PropTypes.oneOf(['none', 'left', 'right', 'both'])
    },
    getDefaultProps: function getDefaultProps() {
        return {
            classPrefix: 'list-group',
            borderPadding: 'none'
        };
    },
    render: function render() {
        var _props = this.props;
        var classPrefix = _props.classPrefix;
        var borderPadding = _props.borderPadding;
        var props = _objectWithoutProperties(_props, ['classPrefix', 'borderPadding']);
        var listGroupClass = (0, _classnames4.default)(classPrefix, _defineProperty({}, 'border-padding-' + borderPadding, borderPadding !== 'none'));
        return _react2.default.createElement('div', _extends({ className: listGroupClass }, props));
    }
});

var ListItem = _react2.default.createClass({
    displayName: 'ListItem',

    propTypes: {
        classPrefix: _react2.default.PropTypes.string,
        title: _react2.default.PropTypes.node,
        subtitle: _react2.default.PropTypes.node,
        content: _react2.default.PropTypes.node,
        right: _react2.default.PropTypes.node,
        mid: _react2.default.PropTypes.node,
        href: _react2.default.PropTypes.string,
        shouldCenter: _react2.default.PropTypes.bool,
        color: _react2.default.PropTypes.string,
        media: _react2.default.PropTypes.node
    },
    getDefaultProps: function getDefaultProps() {
        return {
            classPrefix: 'list-group-item',
            shouldCenter: false
        };
    },

    /**
     * Render left component
     * @param  {React.ProtoTypes.node} media 
     * @param  {React.ProtoTypes.node} title 
     * @return {Object}      
     */
    renderLeft: function renderLeft(media, title) {
        var classPrefix = this.props.classPrefix;
        if (media) {
            return _react2.default.createElement(
                'div',
                { className: classPrefix + '-left' },
                media
            );
        } else if (title) {
            return _react2.default.createElement(
                'div',
                { className: classPrefix + '-left' },
                title
            );
        } else {
            return null;
        }
    },


    /**
     * Render right component
     * @param  {React.ProtoTypes.node} media    
     * @param  {React.ProtoTypes.node} title    
     * @param  {React.ProtoTypes.node} subtitle 
     * @param  {React.ProtoTypes.node} content  
     * @param  {React.ProtoTypes.node} right    
     * @return {Object}       
     */
    renderRight: function renderRight(media, title, subtitle, content, right) {
        var classPrefix = this.props.classPrefix;
        if (media) {
            return _react2.default.createElement(
                'div',
                { className: classPrefix + '-right-expand' },
                _react2.default.createElement(
                    'div',
                    { className: classPrefix + '-title-row' },
                    _react2.default.createElement(
                        'div',
                        { className: classPrefix + '-title' },
                        title
                    ),
                    right
                ),
                subtitle ? _react2.default.createElement(
                    'div',
                    { className: classPrefix + '-subtitle' },
                    subtitle
                ) : null,
                content ? _react2.default.createElement(
                    'div',
                    { className: classPrefix + '-content' },
                    content
                ) : null
            );
        } else if (right) {
            return _react2.default.createElement(
                'div',
                { className: classPrefix + '-right' },
                right
            );
        } else {
            return null;
        }
    },


    /**
     * Render middle component
     * @param {Object} mid Component you want to render into the middle of the List
     * @param {Boolean} shouldCenter Whether the mid component should be put in the right center of the List
     * @return {Object} Wrapped middle component
     */
    renderMid: function renderMid(mid, shouldCenter) {
        var classPrefix = this.props.classPrefix;
        if (!mid) {
            return null;
        } else if (shouldCenter) {
            // fuck center requirement
            return _react2.default.createElement(
                'div',
                { className: classPrefix + '-center' },
                _react2.default.createElement(
                    'div',
                    null,
                    mid
                )
            );
        } else {
            return _react2.default.createElement(
                'div',
                { className: classPrefix + '-mid' },
                mid
            );
        }
    },

    render: function render() {
        var _props2 = this.props;
        var title = _props2.title;
        var subtitle = _props2.subtitle;
        var content = _props2.content;
        var right = _props2.right;
        var mid = _props2.mid;
        var media = _props2.media;
        var classPrefix = _props2.classPrefix;
        var href = _props2.href;
        var shouldCenter = _props2.shouldCenter;
        var color = _props2.color;
        var props = _objectWithoutProperties(_props2, ['title', 'subtitle', 'content', 'right', 'mid', 'media', 'classPrefix', 'href', 'shouldCenter', 'color']);
        var itemClassName = (0, _classnames4.default)(classPrefix, _defineProperty({}, classPrefix + '-' + color, color));
        var Component = 'div';

        if (href) {
            Component = 'a';
            props.href = href;
        }
        delete props.children;
        return _react2.default.createElement(
            Component,
            _extends({ className: itemClassName }, props),
            this.renderLeft(media, title),
            this.renderMid(mid, shouldCenter),
            this.renderRight(media, title, subtitle, content, right)
        );
    }
});

List.Item = ListItem;
exports.default = List;