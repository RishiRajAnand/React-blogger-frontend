'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Modal = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Backdrop = require('./Backdrop');

var _Backdrop2 = _interopRequireDefault(_Backdrop);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _ButtonGroup = require('./ButtonGroup');

var _ButtonGroup2 = _interopRequireDefault(_ButtonGroup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /**
                                                                                                                                                                                                                              * @file This file contains Modal Component
                                                                                                                                                                                                                              * @author mayingcong <mayingcong@xingxy.cn>
                                                                                                                                                                                                                              * @date 2016-11-04
                                                                                                                                                                                                                              */


function noop() {}
/**
 * Modal component
 */
var Modal = exports.Modal = _react2.default.createClass({
    displayName: 'Modal',

    propTypes: {
        isOpen: _react2.default.PropTypes.bool,
        type: _react2.default.PropTypes.string,
        title: _react2.default.PropTypes.node,
        footer: _react2.default.PropTypes.node,
        closeByBackdrop: _react2.default.PropTypes.bool,
        classPrefix: _react2.default.PropTypes.string,
        onDismissed: _react2.default.PropTypes.func,
        onClosed: _react2.default.PropTypes.func,
        boxShadow: _react2.default.PropTypes.bool
    },
    getDefaultProps: function getDefaultProps() {
        return {
            boxShadow: true,
            closeByBackdrop: true,
            classPrefix: 'modal',
            onDismissed: noop,
            onClosed: noop
        };
    },
    getInitialState: function getInitialState() {
        return {
            isOpen: this.props.isOpen
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var isOpen = this.state.isOpen;
        if (!isOpen && nextProps.isOpen) {
            this.openModal();
        } else if (isOpen && !nextProps.isOpen) {
            this.closeModal();
        }
    },
    onDismissed: function onDismissed() {
        var _this = this;

        var shouldClose = this.props.onDismissed();
        if (shouldClose === undefined || shouldClose && !shouldClose.then) {
            this.closeModal();
        } else if (shouldClose && shouldClose.then) {
            shouldClose.then(function (data) {
                if (data) {
                    _this.closeModal();
                }
            });
        }
        console.log('bool ' + shouldClose);
    },
    onClosed: function onClosed() {
        var _this2 = this;

        var shouldClose = this.props.onClosed();
        if (shouldClose === undefined || shouldClose && !shouldClose.then) {
            this.closeModal();
        } else if (shouldClose && shouldClose.then) {
            shouldClose.then(function (data) {
                if (data) {
                    _this2.closeModal();
                }
            });
        }
        console.log('bool ' + shouldClose);
    },


    /**
     * Open Modal
     */
    openModal: function openModal() {
        if (!this.state.isOpen) this.setState({
            isOpen: true
        });
    },


    /**
     * Close Modal
     */
    closeModal: function closeModal() {
        if (this.state.isOpen) {
            this.setState({
                isOpen: false
            });
        }
    },
    renderBackdrop: function renderBackdrop() {
        var closeByBackdrop = this.props.closeByBackdrop;
        var isOpen = this.state.isOpen;

        if (closeByBackdrop) {
            return _react2.default.createElement(_Backdrop2.default, { isOpen: isOpen, onClick: this.onDismissed });
        } else {
            return _react2.default.createElement(_Backdrop2.default, { isOpen: isOpen });
        }
    },
    render: function render() {
        var isOpen = this.state.isOpen;
        var _props = this.props;
        var title = _props.title;
        var children = _props.children;
        var type = _props.type;
        var footer = _props.footer;
        var boxShadow = _props.boxShadow;
        var classPrefix = _props.classPrefix;

        var modalClass = (0, _classnames2.default)(classPrefix, {
            'box-shadow': boxShadow,
            'in': isOpen
        });
        return _react2.default.createElement(
            _reactAddonsCssTransitionGroup2.default,
            {
                component: 'div',
                transitionName: classPrefix + '-transition',
                transitionEnterTimeout: 400,
                transitionLeaveTimeout: 400
            },
            this.state.isOpen ? _react2.default.createElement(
                'div',
                { onTouchMove: function onTouchMove(e) {
                        e.preventDefault();
                    }, key: 'modal' },
                _react2.default.createElement(
                    'div',
                    { className: modalClass },
                    _react2.default.createElement(
                        Header,
                        { classPrefix: classPrefix },
                        title
                    ),
                    _react2.default.createElement(
                        Body,
                        { classPrefix: classPrefix },
                        children
                    ),
                    _react2.default.createElement(Footer, { classPrefix: classPrefix, footer: footer, type: type, onDismissed: this.onDismissed, onClosed: this.onClosed })
                ),
                this.renderBackdrop()
            ) : _react2.default.createElement('span', { key: 'none' })
        );
    }
});

/**
 * Modal.Header
 */
var Header = _react2.default.createClass({
    displayName: 'Header',

    propTypes: {
        classPrefix: _react2.default.PropTypes.string
    },
    getDefaultProps: function getDefaultProps() {
        return {
            classPrefix: 'modal'
        };
    },
    render: function render() {
        var _props2 = this.props;
        var classPrefix = _props2.classPrefix;

        var props = _objectWithoutProperties(_props2, ['classPrefix']);

        return _react2.default.createElement('div', _extends({ className: classPrefix + '-header' }, props));
    }
});

/**
 * Modal.Body
 */
var Body = _react2.default.createClass({
    displayName: 'Body',

    propTypes: {
        classPrefix: _react2.default.PropTypes.string
    },
    getDefaultProps: function getDefaultProps() {
        return {
            classPrefix: 'modal'
        };
    },
    render: function render() {
        var _props3 = this.props;
        var children = _props3.children;
        var classPrefix = _props3.classPrefix;

        return _react2.default.createElement(
            'div',
            { className: classPrefix + '-body' },
            children
        );
    }
});

/**
 * Modal.Footer
 */
var Footer = _react2.default.createClass({
    displayName: 'Footer',

    propTypes: {
        classPrefix: _react2.default.PropTypes.string,
        type: _react2.default.PropTypes.string,
        footer: _react2.default.PropTypes.node,
        onClosed: _react2.default.PropTypes.func,
        onDismissed: _react2.default.PropTypes.func
    },
    getDefaultProps: function getDefaultProps() {
        return {
            classPrefix: 'modal',
            type: 'alert'
        };
    },
    render: function render() {
        var _props4 = this.props;
        var type = _props4.type;
        var classPrefix = _props4.classPrefix;
        var footer = _props4.footer;
        var onDismissed = _props4.onDismissed;
        var onClosed = _props4.onClosed;

        if (!footer) {
            if (type === 'alert') {
                footer = _react2.default.createElement(
                    _Button2.default,
                    { block: true, style: { marginBottom: '0' }, onClick: onClosed },
                    '\u786E\u5B9A'
                );
            } else if (type === 'confirm') {
                footer = _react2.default.createElement(
                    _ButtonGroup2.default,
                    { justified: true },
                    _react2.default.createElement(
                        _Button2.default,
                        { onClick: onClosed },
                        '\u662F'
                    ),
                    _react2.default.createElement(
                        _Button2.default,
                        { onClick: onDismissed },
                        '\u5426'
                    )
                );
            } else if (type === 'dialog') {
                footer = _react2.default.createElement(
                    _ButtonGroup2.default,
                    { justified: true },
                    _react2.default.createElement(
                        _Button2.default,
                        { onClick: onClosed },
                        '\u786E\u5B9A'
                    ),
                    _react2.default.createElement(
                        _Button2.default,
                        { onClick: onDismissed },
                        '\u53D6\u6D88'
                    )
                );
            }
        }
        return _react2.default.createElement(
            'div',
            { className: classPrefix + '-footer' },
            footer
        );
    }
});

/**
 * ModalPortal Component
 * This is used to wrap the Modal component and not like Modal, ModalPortal will 
 * be rendered into the body-element.
 * This is useful on IOS, since position:fixed will be disturbed by overflow:hidden
 */
var ModalPortal = _react2.default.createClass({
    displayName: 'ModalPortal',

    propTypes: {
        isOpen: _react2.default.PropTypes.bool
    },
    getDefaultProps: function getDefaultProps() {
        return {
            isOpen: false
        };
    },
    componentDidMount: function componentDidMount() {
        this.node = document.createElement('div');
        this.node.className = 'modal-portal';
        document.body.appendChild(this.node);
        this.renderModal(this.props);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.renderModal(nextProps);
    },


    /**
     * remove this node both from dom and react-dom
     */
    componentWillUnmount: function componentWillUnmount() {
        (0, _reactDom.unmountComponentAtNode)(this.node);
        document.body.removeChild(this.node);
    },
    renderModal: function renderModal(props) {
        this.portal = (0, _reactDom.unstable_renderSubtreeIntoContainer)(this, _react2.default.createElement(Modal, props), this.node);
    },
    render: function render() {
        return null;
    }
});

Modal.Header = Header;
Modal.Body = Body;
Modal.Footer = Footer;

exports.default = ModalPortal;